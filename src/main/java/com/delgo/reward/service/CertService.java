package com.delgo.reward.service;


import com.delgo.reward.comm.code.CategoryCode;
import com.delgo.reward.comm.code.GeoCode;
import com.delgo.reward.comm.code.PGeoCode;
import com.delgo.reward.comm.exception.NotFoundDataException;
import com.delgo.reward.comm.ncp.geo.GeoDataService;
import com.delgo.reward.comm.ncp.storage.BucketName;
import com.delgo.reward.comm.ncp.storage.ObjectStorageService;
import com.delgo.reward.domain.certification.CertPhoto;
import com.delgo.reward.domain.certification.Certification;
import com.delgo.reward.domain.code.Code;
import com.delgo.reward.domain.user.User;
import com.delgo.reward.dto.cert.CertResponse;
import com.delgo.reward.dto.comm.PageCertResponse;
import com.delgo.reward.dto.user.UserVisitMungpleCountDTO;
import com.delgo.reward.mongoDomain.mungple.MongoMungple;
import com.delgo.reward.mongoService.MongoMungpleService;
import com.delgo.reward.record.certification.CertRecord;
import com.delgo.reward.record.certification.ModifyCertRecord;
import com.delgo.reward.repository.CertPhotoRepository;
import com.delgo.reward.repository.CertRepository;
import com.delgo.reward.repository.ReactionRepository;
import com.google.api.client.util.ArrayMap;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.time.LocalDate;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;
import java.util.stream.Stream;


@Slf4j
@Service
@Transactional
@RequiredArgsConstructor
public class CertService {

    // Service
    private final UserService userService;
    private final PhotoService photoService;
    private final MongoMungpleService mongoMungpleService;
    private final GeoDataService geoDataService;
    private final CodeService codeService;
    private final ObjectStorageService objectStorageService;

    // Repository
    private final CertRepository certRepository;
    private final ReactionRepository reactionRepository;
    private final CertPhotoRepository certPhotoRepository;

    /**
     * 인증 생성
     * 일반 인증 - (위도,경도)로 NCP에서 주소 조회 필요
     */
    public Certification create(CertRecord record, List<MultipartFile> photos) {
        User user = userService.getUserById(record.userId());
        String address = geoDataService.getReverseGeoData(record.latitude(), record.longitude());
        Code code = codeService.getGeoCodeByAddress(address);

        Certification certification = saveCert(record.toEntity(address, code, user));

        List<CertPhoto> certPhotos = createCertPhoto(certification.getCertificationId(),photos);
        certPhotoRepository.saveAll(certPhotos);
        certification.setPhotos(certPhotos);

        return certification;
    }

    public Certification createByMungple(CertRecord record, List<MultipartFile> photos) {
        User user = userService.getUserById(record.userId());
        MongoMungple mongoMungple = mongoMungpleService.getMungpleByMungpleId(record.mungpleId());
        Certification certification = saveCert(record.toEntity(mongoMungple, user));

        List<CertPhoto> certPhotos = createCertPhoto(certification.getCertificationId(),photos);
        certPhotoRepository.saveAll(certPhotos);
        certification.setPhotos(certPhotos);

        return certification;
    }

    public List<CertPhoto> createCertPhoto(int certificationId, List<MultipartFile> photos) {
        AtomicInteger autoGeneratedId = new AtomicInteger(1);
        List<CertPhoto> certPhotoList = photos.stream()
                .map(photo -> {
                    String fileName = photoService.makeCertFileName(certificationId, photo, autoGeneratedId.incrementAndGet());
                    String url = photoService.save(fileName, photo);
                    return CertPhoto.builder()
                            .certificationId(certificationId)
                            .url(url)
                            .isCorrect(true)
                            .build();
                })
                .toList();

        return certPhotoRepository.saveAll(certPhotoList);
    }

    /**
     * 인증 저장
     */
    public Certification saveCert(Certification certification) {
        return certRepository.save(certification);
    }

    /**
     * [certId] 인증 조회
     */
    public Certification getCertById(int certificationId) {
        return certRepository.findCertByCertificationId(certificationId)
                .orElseThrow(() -> new NotFoundDataException("[Certification] certificationId : " + certificationId));
    }

    /**
     * 전체 인증 조회 - Not Paging
     */
    public List<Certification> getCertsByUserId(int userId) {
        List<Integer> certIds = certRepository.findCertIdByUserUserId(userId);
        return getCertsByIds(certIds);
    }

    /**
     * [Date] 인증 조회
     */
    public List<Certification> getCertsByDate(int userId, LocalDate date) {
        return certRepository.findCertByDateAndUser(userId, date.atStartOfDay(), date.atTime(23, 59, 59));
    }

    /**
     * [Date] 인증 조회 - ClassificationCategory 사용
     */
    public List<Certification> getCertsByDateWithoutUser(LocalDate localDate){
        return certRepository.findCertByDate(localDate.minusDays(1).atStartOfDay(), localDate.atStartOfDay());
    }

    /**
     * [Recent] 인증 조회
     */
    public List<Certification> getRecentCerts(int userId, int count) {
        List<Integer> certIds = certRepository.findRecentCertId(userId, PageRequest.of(0, count));
        return getCertsByIds(certIds);
    }

    /**
     * [Exposed] 인증 조회 - Map 사용
     */
    public List<Certification> getExposedCerts(int count) {
        List<Integer> certIds = certRepository.findCertIdByIsExpose(PageRequest.of(0, count));
        return getCertsByIds(certIds);
    }

    /**
     * [ids] 인증 조회
     */
    public List<Certification> getCertsByIds(List<Integer> ids){
        return certRepository.findCertByIds(ids);
    }

    /**
     * 전체 인증 조회 - Paging
     * 1. Paging으로 CertIds 조회
     * 2. CertId로 (EntityGraph) 실제 객체 조회. ( [ids] 인증 조회 )
     *   - Paging, EntityGraph 같이 사용시 메모리 과부하
     */
    public PageCertResponse getAllCert(int userId, Pageable pageable) {
        Slice<Integer> slice = certRepository.findAllCertIdByPaging(userId, pageable);
        List<Certification> certificationList = getCertsByIds(slice.getContent());
        List<CertResponse> certs = CertResponse.fromList(userId,certificationList);

        return new PageCertResponse(certs, slice.getSize(), slice.getNumber(), slice.isLast());
    }

    /**
     * 전체 인증 조회 (특정 인증 제외)
     * 클라이언트에서 특정 인증글을 맨 위로 올렸을 때 중복을 방지하기 위해 해당 인증글은 반환 리스트에서 제거한다.
     */
    public PageCertResponse getAllCertExcludeSpecificCert(int userId, int certificationId, Pageable pageable) {
        Slice<Integer> slice = certRepository.findAllExcludeSpecificCert(userId, certificationId, pageable);
        List<Certification> certificationList = getCertsByIds(slice.getContent());
        List<CertResponse> certs = CertResponse.fromList(userId,certificationList);

        return new PageCertResponse(certs, slice.getSize(), slice.getNumber(), slice.isLast());
    }

    /**
     * [Mungple] 인증 조회
     */
    public PageCertResponse getCertsByMungpleId(int userId, int mungpleId, Pageable pageable) {
        Slice<Integer> slice = certRepository.findCertByMungple(mungpleId, pageable);
        List<Certification> certificationList = getCertsByIds(slice.getContent());
        List<CertResponse> certs = CertResponse.fromList(userId,certificationList);

        return new PageCertResponse(certs, slice.getSize(), slice.getNumber(), slice.isLast());
    }

    /**
     * [My] 내가 작성한 인증 조회
     */
    public PageCertResponse getMyCerts(int userId, CategoryCode categoryCode, Pageable pageable) {
        Slice<Integer> slice = categoryCode.equals(CategoryCode.CA0000)
                ? certRepository.findCertIdByUserId(userId, pageable)
                : certRepository.findCertIdByUserIdAndCategoryCode(userId, categoryCode, pageable);

        List<Certification> certificationList = getCertsByIds(slice.getContent());
        List<CertResponse> certs = CertResponse.fromList(userId,certificationList);
        User user = userService.getUserById(userId);
        return new PageCertResponse(certs, slice.getSize(), slice.getNumber(), slice.isLast(), getCertCountByUser(userId), user.getViewCount());
    }

    /**
     * [My] 내가 작성한 모든 인증 조회
     */
    public List<Certification> getAllMyCerts(int userId) {
        List<Integer> certIdList = certRepository.findAllCertIdByUserId(userId);
        return getCertsByIds(certIdList);
    }

    /**
     *  [Other] 다른 사용자가 작성한 인증 조회
     */
    public PageCertResponse getOtherCerts(int userId, CategoryCode categoryCode, Pageable pageable) {
        Slice<Integer> slice = categoryCode.equals(CategoryCode.CA0000)
                ? certRepository.findCorrectCertIdByUserId(userId, pageable)
                : certRepository.findCorrectCertIdByUserIdAndCategoryCode(userId, categoryCode, pageable);

        List<Certification> certificationList = getCertsByIds(slice.getContent());
        List<CertResponse> certs = CertResponse.fromList(userId,certificationList);
        User user = userService.getUserById(userId);
        return new PageCertResponse(certs, slice.getSize(), slice.getNumber(), slice.isLast(), getCorrectCertCountByUserId(userId),user.getViewCount());
    }

    /**
     *  [User] 작성한 올바른 인증 조회
     */
    public List<Certification> getCorrectCertsByUserId(int userId) {
        return certRepository.findCorrectCertByUserId(userId);
    }

    /**
     * [User] 인증 개수 조회
     */
    public int getCertCountByUser(int userId) {
        return certRepository.countByUserUserId(userId);
    }

    /**
     * [User] 인증 개수 조회
     */
    public int getCorrectCertCountByUserId(int userId) {
        return certRepository.countByUserUserIdAndIsCorrect(userId, true);
    }

    /**
     * 유저 인증 중 가장 많이 방문한 멍플 조회
     */
    public List<UserVisitMungpleCountDTO> getVisitedMungpleIdListTop3ByUserId(int userId){
        Pageable pageable = PageRequest.of(0, 3);

        List<UserVisitMungpleCountDTO> userVisitMungpleCountDTOList = certRepository.findVisitTop3MungpleIdByUserId(userId, pageable);
        return mongoMungpleService.getMungpleListByIds(userVisitMungpleCountDTOList);
    }

    /**
     * [User & Mungple] 인증 개수 조회
     */
    public int getCertCountByMungpleOfSpecificUser(int userId) {
        return certRepository.countOfCertByMungpleAndUser(userId);
    }

    /**
     * [Mungple] 올바른 인증 개수 조회
     */
    public int getCorrectCertCountByMungple(int mungpleId) {
        return certRepository.countOfCorrectCertByMungple(mungpleId);
    }

    /**
     * 인증 수정
     */
    public Certification modifyCert(Certification certification, ModifyCertRecord record) {
        return certification.modify(record);
    }

    /**
     * isCorrect 수정
     */
    public void changeIsCorrect(int certId, boolean isCorrect) {
        Certification cert = getCertById(certId);
        cert.setIsCorrect(isCorrect);
    }

    /**
     * 인증 삭제
     * 관련 좋아요 삭제, NCP Object Storage 삭제 필요
     */
    public void deleteCert(int certificationId) {
        certRepository.deleteById(certificationId);
        reactionRepository.deleteByCertificationId(certificationId);
        objectStorageService.deleteObject(BucketName.CERTIFICATION,certificationId + "_cert.webp");
    }

    /**
     * Map TEST
     */
    public Map<String, List<Certification>> test(int count){
        Map<String, List<Certification>> certByPGeoCode = new ArrayMap<>();
        List<Certification> certificationList = new ArrayList<>();

        for(PGeoCode p: PGeoCode.values()){
            if(p.getPGeoCode().equals(PGeoCode.P101000.getPGeoCode())){
                List<Certification> certificationListOfSongPa = certRepository.findCertByGeoCode(GeoCode.C101180.getGeoCode(), PageRequest.of(0, 3));
                List<Certification> certificationListNotOfSongPa = certRepository.findCertByPGeoCodeExceptGeoCode(p.getPGeoCode(), GeoCode.C101180.getGeoCode(), PageRequest.of(0, 3));

                certificationList = Stream.concat(certificationListOfSongPa.stream(), certificationListNotOfSongPa.stream())
                        .collect(Collectors.toList());
            } else {
                certificationList = certRepository.findCertByPGeoCode(p.getPGeoCode(), PageRequest.of(0, count));
            }
            if(certificationList.size() > 0){
                certByPGeoCode.put(p.getPGeoCode(), certificationList);
            }
        }

        return certByPGeoCode;
    }
}
