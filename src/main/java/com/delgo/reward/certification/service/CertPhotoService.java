package com.delgo.reward.certification.service;


import com.delgo.reward.certification.domain.CertPhoto;
import com.delgo.reward.certification.domain.Certification;
import com.delgo.reward.certification.service.port.CertPhotoRepository;
import com.delgo.reward.common.service.PhotoService;
import lombok.Builder;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;


@Service
@Builder
@RequiredArgsConstructor
public class CertPhotoService {
    private final PhotoService photoService;
    private final CertPhotoRepository certPhotoRepository;

    /**
     * 인증 사진 저장
     */
    @Transactional
    public List<CertPhoto> create(int certificationId, List<MultipartFile> photos) {
        AtomicInteger autoGeneratedId = new AtomicInteger(1);
        List<CertPhoto> certPhotoList = photos.stream()
                .map(photo -> {
                    String fileName = photoService.makeCertFileName(certificationId, photo, autoGeneratedId.incrementAndGet());
                    String url = photoService.save(fileName, photo);
                    return CertPhoto.from(certificationId, url);
                })
                .toList();

        return certPhotoRepository.saveAll(certPhotoList);
    }

    /**
     *  단 건 인증 사진 조회
     */
    public List<CertPhoto> getListByCertId(int certificationId) {
        return certPhotoRepository.findListByCertId(certificationId);
    }

    /**
     *  인증 List 사진 조회
     */
    public Map<Integer, List<CertPhoto>> getMapByCertList(List<Certification> certList) {
        List<Integer> certIdList = certList.stream().map(Certification::getCertificationId).toList();
        List<CertPhoto> certPhotoList = certPhotoRepository.findListByCertIdList(certIdList);
        return certPhotoList.stream().collect(Collectors.groupingBy(CertPhoto::getCertificationId));
    }
}
