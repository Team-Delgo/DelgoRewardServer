package com.delgo.reward.fake;

import com.delgo.reward.certification.domain.CertPhoto;
import com.delgo.reward.certification.service.port.CertPhotoRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicInteger;


public class FakeCertPhotoRepositoryImpl implements CertPhotoRepository {
    private final AtomicInteger autoGeneratedId = new AtomicInteger(0);
    private List<CertPhoto> certPhotos;

    public FakeCertPhotoRepositoryImpl(List<CertPhoto> certPhotos) {
        this.certPhotos = certPhotos;
    }

    @Override
    public List<CertPhoto> saveAll(List<CertPhoto> certPhotoList) {
        return certPhotoList.stream().map(photo -> CertPhoto.builder()
                .certPhotoId(autoGeneratedId.incrementAndGet())
                .certificationId(photo.getCertificationId())
                .url(photo.getUrl())
                .isCorrect(true)
                .build()).toList();
    }

    @Override
    public List<CertPhoto> findListByCertId(int certificationId) {
        return certPhotos.stream()
                .filter(photo -> photo.getCertificationId() == certificationId)
                .toList();
    }

    @Override
    public List<CertPhoto> findListByCertIdList(List<Integer> certificationIdList) {
        List<CertPhoto> result = new ArrayList<>();
        certificationIdList.forEach(certId -> {
           List<CertPhoto> list = certPhotos.stream()
                        .filter(photo -> Objects.equals(photo.getCertificationId(), certId))
                        .toList();

           result.addAll(list);
        });
        return result;
    }
}
