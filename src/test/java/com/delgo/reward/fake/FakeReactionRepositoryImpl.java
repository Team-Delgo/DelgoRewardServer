package com.delgo.reward.fake;

import com.delgo.reward.certification.domain.Reaction;
import com.delgo.reward.certification.service.port.ReactionRepository;
import com.delgo.reward.certification.domain.ReactionCode;

import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicInteger;


public class FakeReactionRepositoryImpl implements ReactionRepository {
    private final AtomicInteger autoGeneratedId = new AtomicInteger(0);
    private final List<Reaction> reactions;

    public FakeReactionRepositoryImpl(List<Reaction> reactions) {
        this.reactions = reactions;
    }

    @Override
    public Reaction save(Reaction reaction) {
        return Reaction.builder()
                .reactionId(autoGeneratedId.incrementAndGet())
                .userId(reaction.getUserId())
                .certificationId(reaction.getCertificationId())
                .reactionCode(reaction.getReactionCode())
                .isReaction(reaction.getIsReaction())
                .build();
    }

    @Override
    public List<Reaction> findActiveListByCertId(Integer certificationId) {
        return reactions.stream()
                .filter(Reaction::getIsReaction)
                .filter(reaction -> Objects.equals(reaction.getCertificationId(), certificationId))
                .toList();
    }

    @Override
    public List<Reaction> findActiveListByCertIdList(List<Integer> certIdList) {
        List<Reaction> result = new ArrayList<>();
        certIdList.forEach(certId -> {
            List<Reaction> list = reactions.stream()
                    .filter(Reaction::getIsReaction)
                    .filter(photo -> Objects.equals(photo.getCertificationId(), certId))
                    .toList();

            result.addAll(list);
        });

        return result;
    }

    @Override
    public Reaction findByUserIdAndCertIdAndCode(Integer userId, Integer certificationId, ReactionCode reactionCode) {
        return reactions.stream()
                .filter(reaction -> Objects.equals(reaction.getUserId(), userId))
                .filter(reaction -> Objects.equals(reaction.getCertificationId(), certificationId))
                .filter(reaction -> Objects.equals(reaction.getReactionCode(), reactionCode))
                .findFirst()
                .orElseThrow(NoSuchElementException::new);
    }

    @Override
    public Boolean existsReaction(Integer userId, Integer certificationId, ReactionCode reactionCode) {
        return reactions.stream()
                .anyMatch(reaction -> Objects.equals(reaction.getUserId(), userId)
                        && Objects.equals(reaction.getCertificationId(), certificationId)
                        && Objects.equals(reaction.getReactionCode(), reactionCode));
    }

    @Override
    public void deleteByCertId(Integer certificationId) {
        reactions.removeIf(reaction -> Objects.equals(reaction.getCertificationId(), certificationId));
    }
}
